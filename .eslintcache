[{"C:\\DatasanceProjects\\ECN-Viwer\\src\\index.js":"1","C:\\DatasanceProjects\\ECN-Viwer\\src\\App.js":"2","C:\\DatasanceProjects\\ECN-Viwer\\src\\serviceWorker.js":"3","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\FeedbackContext.js":"4","C:\\DatasanceProjects\\ECN-Viwer\\src\\Theme\\ThemeProvider.js":"5","C:\\DatasanceProjects\\ECN-Viwer\\src\\Layout\\index.js":"6","C:\\DatasanceProjects\\ECN-Viwer\\src\\ControllerProvider\\index.js":"7","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Config\\index.js":"8","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\index.js":"9","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Alert.js":"10","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Modal.js":"11","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\agent-manager.js":"12","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\application-manager.js":"13","C:\\DatasanceProjects\\ECN-Viwer\\src\\hooks\\useInterval.js":"14","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\index.js":"15","C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\index.js":"16","C:\\DatasanceProjects\\ECN-Viwer\\src\\Config\\index.js":"17","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Map\\index.js":"18","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Navigation.js":"19","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Map.js":"20","C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\index.js":"21","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\MicroserviceDetails\\index.js":"22","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\ApplicationDetails\\index.js":"23","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\AgentDetails\\index.js":"24","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\index.js":"25","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\utils.js":"26","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\SearchBar.js":"27","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\ApplicationParser.js":"28","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\FileDrop.js":"29","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\constants.js":"30","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Tabs.js":"31","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Status.js":"32","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\ActiveResources.js":"33","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\AgentDetails\\EdgeResourceDetails.js":"34","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\ReactJson.js":"35","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\sharedStyles\\index.js":"36","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\ApplicationList\\index.js":"37","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\AgentList\\index.js":"38","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\MicroservicesTable\\index.js":"39","C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\CatalogTable.js":"40","C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\DeployApplicationTemplate.js":"41","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Confirm.js":"42"},{"size":457,"mtime":1706294936839,"results":"43","hashOfConfig":"44"},{"size":1032,"mtime":1706294936805,"results":"45","hashOfConfig":"44"},{"size":5085,"mtime":1706294936845,"results":"46","hashOfConfig":"44"},{"size":2518,"mtime":1706294936833,"results":"47","hashOfConfig":"44"},{"size":1001,"mtime":1706294936829,"results":"48","hashOfConfig":"44"},{"size":5100,"mtime":1706296157418,"results":"49","hashOfConfig":"44"},{"size":5729,"mtime":1706298642549,"results":"50","hashOfConfig":"44"},{"size":2380,"mtime":1706294936841,"results":"51","hashOfConfig":"44"},{"size":4987,"mtime":1706294936843,"results":"52","hashOfConfig":"44"},{"size":2533,"mtime":1706294936830,"results":"53","hashOfConfig":"44"},{"size":2676,"mtime":1706294936834,"results":"54","hashOfConfig":"44"},{"size":434,"mtime":1706294936842,"results":"55","hashOfConfig":"44"},{"size":835,"mtime":1706294936842,"results":"56","hashOfConfig":"44"},{"size":889,"mtime":1706294936839,"results":"57","hashOfConfig":"44"},{"size":5140,"mtime":1706294936824,"results":"58","hashOfConfig":"44"},{"size":637,"mtime":1706294936811,"results":"59","hashOfConfig":"44"},{"size":6237,"mtime":1706294936812,"results":"60","hashOfConfig":"44"},{"size":2569,"mtime":1706294936843,"results":"61","hashOfConfig":"44"},{"size":3685,"mtime":1706294936824,"results":"62","hashOfConfig":"44"},{"size":4185,"mtime":1706294936821,"results":"63","hashOfConfig":"44"},{"size":7862,"mtime":1706294945181,"results":"64","hashOfConfig":"44"},{"size":16074,"mtime":1706294936822,"results":"65","hashOfConfig":"44"},{"size":14200,"mtime":1706294945183,"results":"66","hashOfConfig":"44"},{"size":14712,"mtime":1706294936814,"results":"67","hashOfConfig":"44"},{"size":9357,"mtime":1706294936821,"results":"68","hashOfConfig":"44"},{"size":1106,"mtime":1706294936826,"results":"69","hashOfConfig":"44"},{"size":2086,"mtime":1706294936835,"results":"70","hashOfConfig":"44"},{"size":1864,"mtime":1706294936831,"results":"71","hashOfConfig":"44"},{"size":1817,"mtime":1706294936833,"results":"72","hashOfConfig":"44"},{"size":107,"mtime":1706294945184,"results":"73","hashOfConfig":"44"},{"size":2864,"mtime":1706294936836,"results":"74","hashOfConfig":"44"},{"size":1584,"mtime":1706294936835,"results":"75","hashOfConfig":"44"},{"size":5074,"mtime":1706294936816,"results":"76","hashOfConfig":"44"},{"size":1145,"mtime":1706294936814,"results":"77","hashOfConfig":"44"},{"size":246,"mtime":1706294936834,"results":"78","hashOfConfig":"44"},{"size":4250,"mtime":1706294936826,"results":"79","hashOfConfig":"44"},{"size":8701,"mtime":1706294936820,"results":"80","hashOfConfig":"44"},{"size":7397,"mtime":1706294936819,"results":"81","hashOfConfig":"44"},{"size":4054,"mtime":1706294936823,"results":"82","hashOfConfig":"44"},{"size":7531,"mtime":1706294936807,"results":"83","hashOfConfig":"44"},{"size":7535,"mtime":1706294936808,"results":"84","hashOfConfig":"44"},{"size":841,"mtime":1706294936832,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"17c8si6",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\DatasanceProjects\\ECN-Viwer\\src\\index.js",[],["185","186"],"C:\\DatasanceProjects\\ECN-Viwer\\src\\App.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\serviceWorker.js",["187"],"// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n/* globals fetch */\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\FeedbackContext.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Theme\\ThemeProvider.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Layout\\index.js",["188"],"import React from 'react'\r\nimport { HashRouter, Route, Switch, NavLink, Redirect, useLocation } from 'react-router-dom'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport HomeIcon from '@material-ui/icons/HomeOutlined'\r\nimport CatalogIcon from '@material-ui/icons/GraphicEqOutlined'\r\nimport SettingsIcon from '@material-ui/icons/SettingsOutlined'\r\n\r\nimport ECNViewer from '../ECNViewer'\r\nimport Catalog from '../Catalog'\r\nimport Modal from '../Utils/Modal'\r\nimport Config from '../Config'\r\n// import ECNViewerConfig from '../ECNViewerConfig'\r\n// import SimpleTabs from '../Utils/Tabs'\r\nimport { ControllerContext } from '../ControllerProvider'\r\n\r\nimport logomark from '../assets/logomark.svg'\r\nimport './layout.scss'\r\n\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { MapProvider } from '../providers/Map'\r\nimport { useData } from '../providers/Data'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  wrapper: {\r\n    color: theme.colors.neutral,\r\n    backgroundColor: 'white'\r\n  },\r\n  divider: {\r\n    margin: '15px 0'\r\n  },\r\n  logo: {\r\n    backgroundColor: theme.colors.purple,\r\n    color: theme.colors.white\r\n  },\r\n  latNav: {\r\n    backgroundColor: theme.colors.carbon\r\n  },\r\n  latIcons: {\r\n    margin: 'auto',\r\n    marginTop: '15px',\r\n    cursor: 'pointer',\r\n    backgroundColor: theme.colors.carbon,\r\n    '.active &': {\r\n      backgroundColor: '#0E445C'\r\n    }\r\n  },\r\n  topIcons: {\r\n    height: '100%',\r\n    width: '25px',\r\n    marginRight: '25px',\r\n    cursor: 'pointer'\r\n  },\r\n  nav: {\r\n    marginBottom: '15px',\r\n    height: '50px',\r\n    '& a': {\r\n      height: '100%',\r\n      '& img': {\r\n        height: '100%'\r\n      }\r\n    }\r\n  },\r\n  footerContainer: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    justifyItems: 'center',\r\n    padding: '20px 10px 20px 0px'\r\n  },\r\n  footer: {\r\n    color: theme.colors.neutral,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    fontSize: '9pt',\r\n    '& a': {\r\n      color: theme.colors.neutral,\r\n      textDecoration: 'none!important'\r\n    }\r\n  }\r\n}))\r\n\r\nfunction RouteWatcher ({ children }) {\r\n  const { refreshData } = useData()\r\n  const location = useLocation()\r\n\r\n  React.useEffect(() => {\r\n    if (location.pathname === '/overview') {\r\n      console.log('Refreshing data')\r\n      refreshData()\r\n    }\r\n  }, [location])\r\n\r\n  return null\r\n}\r\n\r\nexport default function Layout () {\r\n  const classes = useStyles()\r\n  const returnHomeCbRef = React.useRef(null)\r\n  const { user, status } = React.useContext(ControllerContext)\r\n  const [settingsOpen, setSettingsOpen] = React.useState(!(user.email && user.password))\r\n\r\n  console.log(' ====> Rendering layout')\r\n\r\n  const returnHome = () => {\r\n    if (returnHomeCbRef.current) {\r\n      returnHomeCbRef.current()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <RouteWatcher />\r\n        <div className={classes.wrapper + ' wrapper'}>\r\n          <div className={classes.logo + ' logo'}>\r\n            <NavLink to='/overview' onClick={() => returnHome()}>\r\n              <img src={logomark} alt='Edgeworx logomark' />\r\n            </NavLink>\r\n          </div>\r\n          <div className={classes.latNav + ' latnav'}>\r\n            <NavLink to='/overview' onClick={() => returnHome()}>\r\n              <Avatar className={classes.latIcons}>\r\n                <HomeIcon />\r\n              </Avatar>\r\n            </NavLink>\r\n            <NavLink to='/catalog'>\r\n              <Avatar className={classes.latIcons}>\r\n                <CatalogIcon />\r\n              </Avatar>\r\n            </NavLink>\r\n            <Avatar className={classes.latIcons}>\r\n              <SettingsIcon onClick={() => setSettingsOpen(v => !v)} />\r\n            </Avatar>\r\n          </div>\r\n          <div className='content'>\r\n            <Switch>\r\n              <Route path='/catalog' component={Catalog} />\r\n              <Route path='/overview' component={() => <MapProvider><ECNViewer returnHomeCBRef={returnHomeCbRef} /></MapProvider>} />\r\n              <Route component={() => <Redirect to='/overview' />} />\r\n            </Switch>\r\n          </div>\r\n          <div className={`${classes.footerContainer} footer`}>\r\n            <span className={classes.footer}>\r\n              <span>Controller v{status.versions.controller} - ECN Viewer v{status.versions.ecnViewer}</span>\r\n              <a style={{ margin: 'auto' }} href='http://www.eclipse.org/legal/copyright.php'>© {new Date().getFullYear()} Eclipse Foundation, Inc.</a>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </HashRouter>\r\n      <Modal\r\n        {...{\r\n          open: settingsOpen,\r\n          title: 'Configuration',\r\n          onClose: () => setSettingsOpen(false),\r\n          style: {\r\n            modalContent: {\r\n              paddingTop: 0\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {/* <SimpleTabs> */}\r\n        <Config title='User credentials' {...{ onSave: () => setSettingsOpen(false) }} />\r\n        {/* <ECNViewerConfig title='ECN Viewer' {...{ onSave: () => setSettingsOpen(false) }} /> */}\r\n        {/* </SimpleTabs> */}\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\ControllerProvider\\index.js",["189"],"import React from 'react'\r\n\r\nconst controllerJson = window.controllerConfig\r\n\r\nconst initControllerState = (() => {\r\n  const localUser = window.localStorage.getItem('iofogUser')\r\n  if ((!controllerJson.user || !controllerJson.user.email) && localUser) {\r\n    controllerJson.user = JSON.parse(localUser)\r\n  }\r\n  return {\r\n    ...controllerJson,\r\n    api: `${window.location.protocol}//${controllerJson.ip}:${controllerJson.port || 80}/`,\r\n    location: {\r\n      lat: 'Unknown',\r\n      lon: 'Unknown',\r\n      query: controllerJson.ip\r\n    },\r\n    status: {\r\n      versions: {\r\n        controller: '',\r\n        ecnViewer: ''\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\nconst IPLookUp = 'http://ip-api.com/json/'\r\n\r\n// If dev mode, use proxy\r\n// Otherwise assume you are running on the Controller\r\nconst getBaseUrl = () => controllerJson.url || `${window.location.protocol}//${[window.location.hostname, controllerJson.port].join(':')}`;\r\nconst getUrl = (path) => controllerJson.dev ? `/api/controllerApi${path}` : `${getBaseUrl()}${path}`;\r\nconst getHeaders = (headers) => controllerJson.dev\r\n  ? ({\r\n    ...headers,\r\n    'ECN-Api-Destination': controllerJson.dev ? `http://${controllerJson.ip}:${controllerJson.port}/` : ''\r\n  }) : headers\r\n\r\nexport const ControllerContext = React.createContext({\r\n  controller: {\r\n    status: {}\r\n  },\r\n  updateController: () => {}\r\n})\r\n\r\nexport const useController = () => React.useContext(ControllerContext)\r\n\r\nconst lookUpControllerInfo = async (ip) => {\r\n  if (!ip) {\r\n    ip = window.location.host.split(':')[0] // Get only ip, not port\r\n  }\r\n  const localhost = new RegExp('(0\\.0\\.0\\.0|localhost|127\\.0\\.0\\.1|192\\.168\\.)') // eslint-disable-line no-useless-escape\r\n  const lookupIP = localhost.test(ip) ? '8.8.8.8' : ip\r\n  const response = await window.fetch(IPLookUp + lookupIP)\r\n  if (response.ok) {\r\n    return response.json()\r\n  } else {\r\n    throw new Error(response.statusText)\r\n  }\r\n}\r\n\r\nconst getControllerStatus = async (api) => {\r\n  debugger\r\n  const response = await await window.fetch(getUrl('/api/v1/status'), {\r\n    headers: getHeaders({})\r\n  })\r\n  if (response.ok) {\r\n    return response.json()\r\n  } else {\r\n    console.log('Controller status unreachable', { status: response.statusText })\r\n  }\r\n}\r\n\r\nexport default function Context (props) {\r\n  // const [token, setToken] = React.useState(null)\r\n  const tokenRef = React.useRef(null)\r\n  const [controllerUser, setControllerUser] = React.useState(initControllerState.user)\r\n  const [controllerLocation, setControllerLocation] = React.useState(initControllerState.location)\r\n  const [controllerStatus, setControllerStatus] = React.useState(initControllerState.status)\r\n  const [error, setError] = React.useState(null)\r\n  const [refresh, setRefresh] = React.useState(window.localStorage.getItem('iofogRefresh') || 3000)\r\n\r\n  const setToken = (newToken) => {\r\n    tokenRef.current = newToken\r\n  }\r\n  React.useEffect(() => {\r\n    // Grab controller location informations\r\n    const effect = async () => {\r\n      let ipInfo = {}\r\n      try {\r\n        ipInfo = await lookUpControllerInfo(controllerJson.ip)\r\n      } catch (e) {\r\n        ipInfo = {\r\n          lat: 'Unknown',\r\n          lon: 'Unknown',\r\n          query: controllerJson.ip\r\n        }\r\n      }\r\n      setControllerLocation(ipInfo)\r\n    }\r\n    effect()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    const effect = async () => {\r\n      // Everytime user is updated, try to grab status\r\n      const status = await getControllerStatus()\r\n      setControllerStatus(status)\r\n    }\r\n    effect()\r\n  }, [controllerUser])\r\n\r\n  const authenticate = async (user) => {\r\n    const response = await window.fetch(getUrl('/api/v1/user/login'), {\r\n      method: 'POST',\r\n      headers: getHeaders({\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      body: JSON.stringify(user || controllerUser)\r\n    })\r\n    if (response.ok) {\r\n      const token = (await response.json()).accessToken\r\n      setToken(token)\r\n      setError(null)\r\n      return token\r\n    } else {\r\n      setToken(null)\r\n      throw new Error(response.statusText)\r\n    }\r\n  }\r\n\r\n  // Wrapper around window.fetch to add proxy and authorization headers\r\n  const request = React.useMemo(() => async (path, options = {}) => {\r\n    try {\r\n      let t = tokenRef.current\r\n      if (!t) {\r\n        t = await authenticate()\r\n      }\r\n      if (options.body && typeof options.body === typeof {}) {\r\n        options.body = JSON.stringify(options.body)\r\n        options.headers = {\r\n          ...options.headers,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n      const response = await window.fetch(getUrl(path), {\r\n        ...options,\r\n        headers: getHeaders({\r\n          ...options.headers,\r\n          Authorization: t\r\n        })\r\n      })\r\n      if (error) {\r\n        setError(null)\r\n      }\r\n      return response\r\n    } catch (err) {\r\n      setError(err)\r\n      return ({\r\n        ok: false,\r\n        statusText: err.message || 'Could not reach controller'\r\n      })\r\n    }\r\n  }, [tokenRef.current, error])\r\n\r\n  const updateController = async ({ user, refresh }) => {\r\n    window.localStorage.setItem('iofogUser', JSON.stringify(user))\r\n    window.localStorage.setItem('iofogRefresh', refresh)\r\n    setControllerUser(user)\r\n    setRefresh(refresh)\r\n    try {\r\n      await authenticate(user)\r\n    } catch (e) {\r\n      setError(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ControllerContext.Provider value={{\r\n      refresh,\r\n      location: controllerLocation,\r\n      status: controllerStatus,\r\n      user: controllerUser,\r\n      error,\r\n      updateController,\r\n      request\r\n    }}\r\n    >\r\n      {props.children}\r\n    </ControllerContext.Provider>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Config\\index.js",["190"],"import { get as lget, set as lset } from 'lodash'\r\nimport React from 'react'\r\nimport { useController } from '../../ControllerProvider'\r\nimport { theme } from '../../Theme/ThemeProvider'\r\n\r\nexport const ConfigContext = React.createContext()\r\nexport const useConfig = () => React.useContext(ConfigContext)\r\n\r\nconst _initConfig = {\r\n  tags: {},\r\n  controllerLocationInfo: {\r\n    lat: 'Unknown',\r\n    lon: 'Unknown',\r\n    query: ''\r\n  }\r\n}\r\n\r\nconst defaultTagColor = theme.colors.cobalt\r\n\r\nconst ecnViewerConfigKey = 'ecn-viewer-config'\r\n\r\nexport const ConfigProvider = ({\r\n  children\r\n}) => {\r\n  const { request, location } = useController()\r\n  const [config, setConfig] = React.useState({ ..._initConfig, controllerLocation: location })\r\n\r\n  const _fetchConfig = async () => {\r\n    try {\r\n      const res = await request(`/api/v1/config/${ecnViewerConfigKey}`)\r\n      if (res.ok) {\r\n        const { value: stringifiedConfig } = await res.json()\r\n        setConfig(JSON.parse(stringifiedConfig))\r\n      }\r\n    } catch (e) {\r\n\r\n    }\r\n  }\r\n\r\n  const saveConfig = async (newConfig) => {\r\n    const res = await request('/api/v1/config', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        key: ecnViewerConfigKey,\r\n        value: JSON.stringify(newConfig)\r\n      })\r\n    })\r\n    if (res.ok) {\r\n      setConfig(newConfig)\r\n    }\r\n    return res\r\n  }\r\n\r\n  const getTagDisplayInfo = value => {\r\n    return { ...lget(config, `tags['${value}']`, { color: defaultTagColor }), value }\r\n  }\r\n\r\n  const updateTags = (agents = []) => {\r\n    let updated = false\r\n    for (const agent of agents) {\r\n      if (agent.tags) {\r\n        for (const tag of agent.tags) {\r\n          if (!lget(config, `tags['${tag}']`)) {\r\n            updated = true\r\n            lset(config, `tags['${tag}']`, { icon: '', color: defaultTagColor })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (updated) {\r\n      setConfig(config)\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    _fetchConfig()\r\n  }, [])\r\n\r\n  const isDebug = window.location.search.includes('debug=true')\r\n  return (\r\n    <ConfigContext.Provider\r\n      value={{\r\n        isDebug,\r\n        editConfig: setConfig,\r\n        updateTags,\r\n        getTagDisplayInfo,\r\n        saveConfig,\r\n        config\r\n      }}\r\n    >\r\n      {children}\r\n    </ConfigContext.Provider>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Alert.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Modal.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\agent-manager.js",["191"],"const deleteAgent = (request) => async (agent) => {\r\n  return request('/api/v1/iofog/' + agent.uuid, { method: 'DELETE' })\r\n}\r\n\r\nconst listAgents = (request) => async () => {\r\n  const agentsResponse = await request('/api/v1/iofog-list')\r\n  if (!agentsResponse.ok) {\r\n    throw new Error({ message: agentsResponse.statusText })\r\n  }\r\n  return (await agentsResponse.json()).fogs\r\n}\r\n\r\nexport default {\r\n  deleteAgent,\r\n  listAgents\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Data\\application-manager.js",["192"],"const deleteApplication = (request) => async (app) => {\r\n  return request('/api/v1/application/' + app.name, { method: 'DELETE' })\r\n}\r\n\r\nconst listApplications = (request) => async () => {\r\n  const agentsResponse = await request('/api/v1/application')\r\n  if (!agentsResponse.ok) {\r\n    throw new Error({ message: agentsResponse.statusText })\r\n  }\r\n  return (await agentsResponse.json()).applications\r\n}\r\n\r\nconst toggleApplication = (request) => async (app) => {\r\n  const agentsResponse = await request(`/api/v1/application/${app.name}`, {\r\n    method: 'PATCH',\r\n    body: {\r\n      isActivated: !app.isActivated\r\n    }\r\n  })\r\n  if (!agentsResponse.ok) {\r\n    throw new Error({ message: agentsResponse.statusText })\r\n  }\r\n  return agentsResponse\r\n}\r\n\r\nexport default {\r\n  deleteApplication,\r\n  listApplications,\r\n  toggleApplication\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\hooks\\useInterval.js",["193"],"import React from 'react'\r\n\r\nfunction useRecursiveTimeout (\r\n  callback,\r\n  delay\r\n) {\r\n  const savedCallback = React.useRef(callback)\r\n\r\n  // Remember the latest callback.\r\n  React.useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the timeout loop.\r\n  React.useEffect(() => {\r\n    let id\r\n    function tick () {\r\n      const ret = savedCallback.current()\r\n\r\n      if (ret instanceof Promise) {\r\n        ret.then(() => {\r\n          if (delay !== null) {\r\n            id = setTimeout(tick, delay)\r\n          }\r\n        })\r\n      } else {\r\n        if (delay !== null) {\r\n          id = setTimeout(tick, delay)\r\n        }\r\n      }\r\n    }\r\n    if (delay !== null) {\r\n      (savedCallback.current || callback)()\r\n      id = setTimeout(tick, delay)\r\n      return () => id && clearTimeout(id)\r\n    }\r\n  }, [delay])\r\n}\r\n\r\nexport default useRecursiveTimeout\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\index.js",["194","195"],"import React from 'react'\r\nimport { isFinite, uniqBy } from 'lodash'\r\n\r\nimport Map from './Map'\r\nimport Default from './Default'\r\nimport AgentDetails from './AgentDetails'\r\nimport ApplicationDetails from './ApplicationDetails'\r\nimport MicroserviceDetails from './MicroserviceDetails'\r\nimport Navigation from './Navigation'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\n\r\n// import logo from '../assets/logo.png'\r\nimport './layout.scss'\r\n\r\nimport { useMap } from '../providers/Map'\r\nimport { useData } from '../providers/Data'\r\nimport { useConfig } from '../providers/Config'\r\nimport { ControllerContext } from '../ControllerProvider'\r\n\r\nconst views = {\r\n  DEFAULT: 1,\r\n  AGENT_DETAILS: 2,\r\n  APPLICATION_DETAILS: 3,\r\n  MICROSERVICE_DETAILS: 4\r\n}\r\n\r\nexport default function ECNViewer ({ returnHomeCBRef }) {\r\n  const { data, loading } = useData()\r\n  const { config } = useConfig()\r\n  const { location: _location } = React.useContext(ControllerContext)\r\n  const { setMap, map, restoreMapToState } = useMap()\r\n  const [selectedElement, selectElement] = React.useState(null)\r\n  const [history, setHistory] = React.useState([])\r\n  const [view, setView] = React.useState(views.DEFAULT)\r\n  const showMap = useMediaQuery('(min-width:992px)') // Bootstrap4 lg\r\n\r\n  const location = config.controllerLocationInfo || _location\r\n  location.lat = +location.lat\r\n  location.lon = +location.lon\r\n\r\n  const saveHistory = () => {\r\n    setHistory(h => [...h, { view, selectedElement, map }])\r\n  }\r\n\r\n  const selectAgent = (a) => {\r\n    const copy = { ...a }\r\n    saveHistory()\r\n    selectElement(copy)\r\n    if (isFinite(a.latitude) && isFinite(a.longitude)) {\r\n      setMap([copy], { location }, false)\r\n    }\r\n    setView(views.AGENT_DETAILS)\r\n  }\r\n\r\n  const selectApplication = (a) => {\r\n    const copy = { ...a }\r\n    saveHistory()\r\n    selectElement(copy)\r\n    setMap(uniqBy(a.microservices.map(m => data.reducedAgents.byUUID[m.iofogUuid]), a => a.uuid), null, false)\r\n    setView(views.APPLICATION_DETAILS)\r\n  }\r\n\r\n  const selectMicroservice = (a) => {\r\n    const copy = { ...a }\r\n    saveHistory()\r\n    selectElement(copy)\r\n    setMap([data.reducedAgents.byUUID[a.iofogUuid]], null, false)\r\n    setView(views.MICROSERVICE_DETAILS)\r\n  }\r\n\r\n  const seeAllECN = () => {\r\n    selectElement({})\r\n    setView(views.DEFAULT)\r\n    selectController()\r\n    setHistory([])\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    returnHomeCBRef.current = seeAllECN\r\n    return () => { returnHomeCBRef.current = null }\r\n  }, [seeAllECN])\r\n\r\n  const back = () => {\r\n    if (history.length) {\r\n      const previousState = history[history.length - 1]\r\n      setView(previousState.view)\r\n      selectElement(previousState.selectedElement)\r\n      restoreMapToState(previousState.map)\r\n      setHistory(h => {\r\n        h.pop()\r\n        return h\r\n      })\r\n    } else {\r\n      seeAllECN()\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!loading) {\r\n      setMap(data.activeAgents, { location }, true)\r\n    }\r\n  }, [loading])\r\n\r\n  const selectController = () => {\r\n    setMap(data.activeAgents, { location }, true)\r\n  }\r\n\r\n  const setAutozoom = () => {\r\n    setMap(data.controller.agents, { location }, true)\r\n  }\r\n\r\n  const _getView = (view) => {\r\n    switch (view) {\r\n      case views.AGENT_DETAILS:\r\n        return (\r\n          <AgentDetails\r\n            {\r\n              ...{\r\n                agent: selectedElement,\r\n                selectApplication,\r\n                selectMicroservice,\r\n                back\r\n              }\r\n            }\r\n          />\r\n        )\r\n      case views.APPLICATION_DETAILS:\r\n        return (\r\n          <ApplicationDetails\r\n            {\r\n              ...{\r\n                application: selectedElement,\r\n                selectMicroservice,\r\n                selectAgent,\r\n                back\r\n              }\r\n            }\r\n          />\r\n        )\r\n      case views.MICROSERVICE_DETAILS:\r\n        return (\r\n          <MicroserviceDetails\r\n            {\r\n              ...{\r\n                microservice: selectedElement,\r\n                selectApplication,\r\n                selectAgent,\r\n                back\r\n              }\r\n            }\r\n          />\r\n        )\r\n      case views.DEFAULT:\r\n      default:\r\n        return (\r\n          <Default {\r\n            ...{\r\n              setAutozoom,\r\n              selectController,\r\n              selectAgent,\r\n              selectApplication,\r\n              selectedElement,\r\n              setView,\r\n              views\r\n            }\r\n          }\r\n          />)\r\n    }\r\n  }\r\n\r\n  const { controller, msvcsPerAgent } = data\r\n  console.log({ location, controller, config })\r\n  return (\r\n    <div className='viewer-layout-container'>\r\n      <div className='box sidebar'>\r\n        <Navigation {...{ view, selectedElement, views, back }} />\r\n        {_getView(view)}\r\n      </div>\r\n      {showMap && (\r\n        <div className='map-grid-container'>\r\n          <Map {...{ controller: { ...controller, info: { location } }, agent: selectedElement, setAgent: selectAgent, msvcsPerAgent, loading }} />\r\n          <div className='map-overlay' />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Config\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\providers\\Map\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Navigation.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Map.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\index.js",["196"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport ReactJson from '../../Utils/ReactJson'\r\nimport yaml from 'js-yaml'\r\nimport { Menu, MenuItem, Divider } from '@material-ui/core'\r\n\r\nimport { ControllerContext } from '../../ControllerProvider'\r\nimport { FeedbackContext } from '../../Utils/FeedbackContext'\r\nimport Modal from '../../Utils/Modal'\r\nimport CatalogTable from './CatalogTable'\r\nimport Confirm from '../../Utils/Confirm'\r\nimport DeployApplicationTemplate from './DeployApplicationTemplate'\r\n\r\nimport lget from 'lodash/get'\r\nimport { parseMicroservice } from '../../Utils/ApplicationParser'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  pointer: {\r\n    cursor: 'pointer'\r\n  },\r\n  container: {\r\n    padding: '10px 50px 10px 30px'\r\n  },\r\n  flexColumn: {\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  },\r\n  titleRow: {\r\n    marginBottom: '30px'\r\n  }\r\n}))\r\n\r\nconst parseApplication = async (applicationYAML) => {\r\n  return {\r\n    ...applicationYAML,\r\n    microservices: await Promise.all((applicationYAML.microservices || []).map(async m => parseMicroservice(m)))\r\n  }\r\n}\r\n\r\nconst parseApplicationTemplate = async (doc) => {\r\n  if (doc.apiVersion !== 'datasance.com/v1') {\r\n    return [{}, `Invalid API Version ${doc.apiVersion}, current version is datasance.com/v1`]\r\n  }\r\n  if (doc.kind !== 'ApplicationTemplate') {\r\n    return [{}, `Invalid kind ${doc.kind}`]\r\n  }\r\n  if (!doc.metadata || !doc.spec) {\r\n    return [{}, 'Invalid YAML format']\r\n  }\r\n  const application = await parseApplication(lget(doc, 'spec.application', {}))\r\n  const applicationTemplate = {\r\n    name: lget(doc, 'metadata.name', lget(doc, 'spec.name', undefined)),\r\n    description: lget(doc, 'spec.description', ''),\r\n    application,\r\n    variables: lget(doc, 'spec.variables', [])\r\n  }\r\n\r\n  return [applicationTemplate]\r\n}\r\n\r\nexport default function Catalog () {\r\n  const classes = useStyles()\r\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\r\n  const [openDeployModal, setOpenDeployModal] = React.useState(false)\r\n  const [openRemoveConfirm, setOpenRemoveConfirm] = React.useState(false)\r\n  const [fetching, setFetching] = React.useState(true)\r\n  const [loading, setLoading] = React.useState(false)\r\n  const [catalog, setCatalog] = React.useState([])\r\n  const [selectedItem, setSelectedItem] = React.useState({})\r\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null)\r\n  const { request } = React.useContext(ControllerContext)\r\n  const { pushFeedback } = React.useContext(FeedbackContext)\r\n\r\n  const handleCloseMenu = () => setMenuAnchorEl(null)\r\n  const openMenu = (item, e) => {\r\n    setSelectedItem(item)\r\n    setMenuAnchorEl(e.currentTarget)\r\n  }\r\n  const openDetails = () => {\r\n    setOpenDetailsModal(true)\r\n    handleCloseMenu()\r\n  }\r\n  const openDeploy = () => {\r\n    setOpenDeployModal(true)\r\n    handleCloseMenu()\r\n  }\r\n  const openRemove = () => {\r\n    setOpenRemoveConfirm(true)\r\n    handleCloseMenu()\r\n  }\r\n\r\n  function mapApplicationTemplate (item) {\r\n    return {\r\n      display: {\r\n        microservices: lget(item, 'application.microservices', []).map(m => m.name),\r\n        variables: lget(item, 'variables', []).map(m => m.key)\r\n      },\r\n      ...item\r\n    }\r\n  }\r\n\r\n  async function fetchCatalog () {\r\n    try {\r\n      setFetching(true)\r\n      const catalogItemsResponse = await request('/api/v1/applicationTemplates')\r\n      if (!catalogItemsResponse.ok) {\r\n        pushFeedback({ message: catalogItemsResponse.statusText, type: 'error' })\r\n        setFetching(false)\r\n        return\r\n      }\r\n      const catalogItems = (await catalogItemsResponse.json()).applicationTemplates\r\n      setCatalog(catalogItems.map(item => mapApplicationTemplate(item)))\r\n      setFetching(false)\r\n    } catch (e) {\r\n      pushFeedback({ message: e.message, type: 'error' })\r\n      setFetching(false)\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    fetchCatalog()\r\n  }, [])\r\n\r\n  const addCatalogItem = async (item) => {\r\n    const newItem = { ...item }\r\n    setLoading(true)\r\n    const response = await request(`/api/v1/applicationTemplate/${newItem.name}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(newItem)\r\n    })\r\n    if (response.ok) {\r\n      pushFeedback({ message: 'Catalog Updated!', type: 'success' })\r\n      newItem.id = (await response.json()).id\r\n      setCatalog([mapApplicationTemplate(newItem), ...catalog.filter(i => i.id !== newItem.id)])\r\n      setLoading(false)\r\n    } else {\r\n      pushFeedback({ message: response.statusText, type: 'error' })\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const removeCatalogItem = async (item) => {\r\n    try {\r\n      setLoading(true)\r\n      const res = await request(`/api/v1/applicationTemplate/${item.name}`, {\r\n        method: 'DELETE'\r\n      })\r\n      if (!res.ok) {\r\n        pushFeedback({ message: res.statusText, type: 'error' })\r\n      } else {\r\n        setCatalog(catalog.filter(i => i.id !== item.id))\r\n        pushFeedback({ message: 'Application template deleted', type: 'success' })\r\n      }\r\n      setLoading(false)\r\n    } catch (e) {\r\n      pushFeedback({ message: e.message, type: 'error', uuid: 'error' })\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const readCatalogItemFile = async (item) => {\r\n    const file = item.files[0]\r\n    if (file) {\r\n      const reader = new window.FileReader()\r\n\r\n      reader.onload = async function (evt) {\r\n        try {\r\n          const doc = yaml.safeLoad(evt.target.result)\r\n          const [catalogItem, err] = await parseApplicationTemplate(doc)\r\n          if (err) {\r\n            return pushFeedback({ message: err, type: 'error' })\r\n          }\r\n          addCatalogItem(catalogItem)\r\n        } catch (e) {\r\n          console.error({ e })\r\n          pushFeedback({ message: 'Could not parse the file', type: 'error' })\r\n        }\r\n      }\r\n\r\n      reader.onerror = function (evt) {\r\n        pushFeedback({ message: evt, type: 'error' })\r\n      }\r\n\r\n      reader.readAsText(file, 'UTF-8')\r\n    }\r\n  }\r\n\r\n  const getDetails = (selectedItem) => {\r\n    const detailsObj = { ...selectedItem }\r\n    delete detailsObj.display\r\n    return detailsObj\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.container}>\r\n        <CatalogTable {...{ loading: fetching, uploading: loading, openMenu, catalog, readCatalogItemFile }} />\r\n      </div>\r\n      <Modal\r\n        {...{\r\n          open: openDetailsModal,\r\n          title: `${selectedItem.name} details`,\r\n          onClose: () => setOpenDetailsModal(false),\r\n          size: 'lg'\r\n        }}\r\n      >\r\n        <ReactJson title='Application template' src={getDetails(selectedItem)} name={false} />\r\n      </Modal>\r\n      <Modal\r\n        {...{\r\n          open: openDeployModal,\r\n          title: `Deploy ${selectedItem.name}`,\r\n          onClose: () => setOpenDeployModal(false)\r\n        }}\r\n      >\r\n        <DeployApplicationTemplate template={selectedItem} close={() => setOpenDeployModal(false)} />\r\n      </Modal>\r\n      <Confirm\r\n        open={openRemoveConfirm}\r\n        title={`Delete Application template ${selectedItem.name} ?`}\r\n        onClose={() => setOpenRemoveConfirm(false)}\r\n        confirmColor='secondary'\r\n        onConfirm={() => {\r\n          removeCatalogItem(selectedItem)\r\n          setOpenRemoveConfirm(false)\r\n        }}\r\n      >\r\n        <span>This is not reversible.</span>\r\n      </Confirm>\r\n      <Menu\r\n        id='catalog-menu'\r\n        anchorEl={menuAnchorEl}\r\n        keepMounted\r\n        open={Boolean(menuAnchorEl)}\r\n        onClose={handleCloseMenu}\r\n      >\r\n        <MenuItem onClick={openDeploy}>Deploy</MenuItem>\r\n        <MenuItem onClick={openDetails}>Details</MenuItem>\r\n        <Divider />\r\n        <MenuItem onClick={openRemove}>Remove item</MenuItem>\r\n      </Menu>\r\n    </>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\MicroserviceDetails\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\ApplicationDetails\\index.js",["197","198"],"import React from 'react'\r\n\r\nimport ReactJson from '../../Utils/ReactJson'\r\nimport { Paper, Typography, makeStyles, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button, Table, TableBody, TableHead, TableRow, TableCell, useMediaQuery } from '@material-ui/core'\r\n\r\nimport { useData } from '../../providers/Data'\r\n\r\nimport getSharedStyle from '../sharedStyles'\r\nimport { dateFormat, icons } from '../utils'\r\n\r\nimport moment from 'moment'\r\nimport MicroservicesTable from '../MicroservicesTable'\r\nimport yaml from 'js-yaml'\r\n\r\nimport AceEditor from 'react-ace'\r\nimport 'ace-builds/src-noconflict/theme-monokai'\r\nimport 'ace-builds/src-noconflict/mode-yaml'\r\n\r\nimport { useFeedback } from '../../Utils/FeedbackContext'\r\nimport { MsvcStatus as Status } from '../../Utils/Status'\r\nimport Modal from '../../Utils/Modal'\r\nimport SearchBar from '../../Utils/SearchBar'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  ...getSharedStyle(theme)\r\n}))\r\n\r\nconst notFoundMsvc = { name: 'UNKNOWN', status: {}, notFound: true }\r\n\r\nexport default function ApplicationDetails ({ application: selectedApplication, selectApplication, selectMicroservice, selectAgent, back }) {\r\n  const { data, toggleApplication: _toggleApplication, deleteApplication: _deleteApplication } = useData()\r\n  const classes = useStyles()\r\n  const { pushFeedback } = useFeedback()\r\n  const [openDeleteApplicationDialog, setOpenDeleteApplicationDialog] = React.useState(false)\r\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\r\n  const [msvcFilter, setMsvcFilter] = React.useState('')\r\n  const isMediumScreen = useMediaQuery('(min-width: 768px)')\r\n\r\n  const { applications, reducedAgents } = data\r\n  const application = (applications || []).find(a => selectedApplication.name === a.name) || selectedApplication // Get live updates from data\r\n  const runningMsvcs = application.microservices.filter(m => m.status.status === 'RUNNING')\r\n\r\n  const toggleApplication = async (app) => {\r\n    try {\r\n      const response = await _toggleApplication(app)\r\n      if (response.ok) {\r\n        app.isActivated = !app.isActivated\r\n        pushFeedback({ type: 'success', message: `Application ${app.isActivated ? 'Started' : 'Stopped'}!` })\r\n      } else {\r\n        pushFeedback({ type: 'error', message: response.status })\r\n      }\r\n    } catch (e) {\r\n      pushFeedback({ type: 'error', message: e.message || e.status })\r\n    }\r\n  }\r\n\r\n  const restartApplication = async (app) => {\r\n    await toggleApplication(app)\r\n    await toggleApplication(app)\r\n  }\r\n\r\n  const deleteApplication = async (app) => {\r\n    try {\r\n      const response = await _deleteApplication(app)\r\n      if (response.ok) {\r\n        pushFeedback({ type: 'success', message: 'Application Deleted!' })\r\n        setOpenDeleteApplicationDialog(false)\r\n        back()\r\n      } else {\r\n        pushFeedback({ type: 'error', message: response.status })\r\n      }\r\n    } catch (e) {\r\n      pushFeedback({ type: 'error', message: e.message || e.status })\r\n    }\r\n  }\r\n\r\n  const _getApplicationYAMLFromJSON = (app) => {\r\n    return {\r\n      apiVersion: 'datasance.com/v1',\r\n      kind: 'Application',\r\n      metadata: {\r\n        name: app.name\r\n      },\r\n      spec: {\r\n        microservices: app.microservices.map(m => ({\r\n          name: m.name,\r\n          agent: {\r\n            name: (reducedAgents.byUUID[m.iofogUuid] || { name: '__UNKNOWN__' }).name\r\n          },\r\n          images: m.images.reduce((acc, image) => {\r\n            switch (image.fogTypeId) {\r\n              case 1:\r\n                acc.x86 = image.containerImage\r\n                break\r\n              case 2:\r\n                acc.arm = image.containerImage\r\n                break\r\n            }\r\n            return acc\r\n          }, {\r\n            registry: m.registryId\r\n          }),\r\n          container: {\r\n            ports: m.ports.map(p => {\r\n              if (p.host) {\r\n                p.host = (reducedAgents.byUUID[p.host] || { name: p.host }).name\r\n              }\r\n              return p\r\n            }),\r\n            volumes: m.volumeMappings.map(vm => {\r\n              delete vm.id\r\n              return vm\r\n            }),\r\n            env: m.env.map(env => {\r\n              delete env.id\r\n              return env\r\n            }),\r\n            extraHosts: m.extraHosts.map(eH => {\r\n              delete eH.id\r\n              return eH\r\n            }),\r\n            commands: m.cmd.map(cmd => {\r\n              delete cmd.id\r\n              return cmd\r\n            })\r\n          },\r\n          config: JSON.parse(m.config)\r\n        })),\r\n        routes: app.routes.map(r => ({\r\n          name: r.name,\r\n          from: r.from,\r\n          to: r.to\r\n        }))\r\n      }\r\n    }\r\n  }\r\n\r\n  const yamlDump = React.useMemo(() => yaml.dump(_getApplicationYAMLFromJSON(application)), [application])\r\n\r\n  const status = application.isActivated ? 'STARTED' : 'STOPPED'\r\n  const routes = application.routes || []\r\n  if (!routes.length) { routes.push({}) }\r\n\r\n  const mainActions = (\r\n    <div className={classes.actions} style={{ minWidth: '100px' }}>\r\n      <icons.DeleteIcon onClick={() => setOpenDeleteApplicationDialog(true)} className={classes.action} title='Delete application' />\r\n      {application.isActivated\r\n        ? <icons.RestartIcon className={classes.action} onClick={() => restartApplication(application)} title='Restart application' />\r\n        : <icons.RestartIcon className={classes.disabledAction} title='Restart application' />}\r\n      {application.isActivated\r\n        ? <icons.StopIcon className={classes.action} onClick={() => toggleApplication(application)} title='Stop application' />\r\n        : <icons.PlayIcon className={classes.action} onClick={() => toggleApplication(application)} title='Start application' />}\r\n    </div>\r\n  )\r\n\r\n  const detailActions = (\r\n    <div className={classes.actions} style={{ minWidth: 0 }}>\r\n      <icons.CodeIcon onClick={() => setOpenDetailsModal(true)} className={classes.action} title='Details' />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Paper className={`section first ${classes.multiSections}`}>\r\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Status</span>\r\n            {!isMediumScreen && mainActions}\r\n          </Typography>\r\n          <span className={classes.text} style={{ display: 'flex', alignItems: 'center' }}><Status status={status} style={{ marginRight: '5px', marginTop: '-3px' }} />{status}</span>\r\n        </div>\r\n        <div className={classes.sectionDivider} />\r\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Description</span>\r\n            {isMediumScreen && mainActions}\r\n          </Typography>\r\n          <span className={classes.text}>{application.description}</span>\r\n        </div>\r\n      </Paper>\r\n      <Paper className={`section ${classes.multiSections}`}>\r\n        <div className={[classes.section, 'paper-container-left'].join(' ')}>\r\n          <Typography variant='subtitle2' className={classes.title} style={{ minWidth: '100%' }}>\r\n            <span>Application Details</span>\r\n            {!isMediumScreen && detailActions}\r\n          </Typography>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Last Active</span>\r\n            <span className={classes.text}>{moment(application.lastStatusTime).format(dateFormat)}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Microservices</span>\r\n            <span className={classes.text}>{runningMsvcs.length}/{application.microservices.length}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Created at</span>\r\n            <span className={classes.text}>{moment(application.createdAt).format(dateFormat)}</span>\r\n          </div>\r\n        </div>\r\n        {isMediumScreen && (\r\n          <div className={[classes.section, 'paper-container-right'].join(' ')}>\r\n            <Typography variant='subtitle2' className={classes.title} style={{ justifyContent: 'flex-end' }}>\r\n              {detailActions}\r\n            </Typography>\r\n            {/* {application.routes.map((r, idx) =>\r\n            <div key={r.name || idx} className={classes.subSection}>\r\n              <span className={classes.subTitle}>{r.name}</span>\r\n              <span className={classes.text}>{r.from}&nbsp;&#8594;&nbsp;{r.to}</span>\r\n            </div>\r\n          )} */}\r\n          </div>\r\n        )}\r\n      </Paper>\r\n      <Paper className='section'>\r\n        <div className='section-container'>\r\n          <div className={[classes.section, classes.cardTitle, 'paper-container-left', 'paper-container-right'].join(' ')}>\r\n            <Typography variant='subtitle2' className={classes.title}>\r\n              <span className={[classes.stickyLeft, classes.textEllipsis].join(' ')}>Microservices</span>\r\n              <SearchBar onSearch={setMsvcFilter} inputClasses={{ root: classes.narrowSearchBar }} classes={{ root: classes.stickyRight }} />\r\n            </Typography>\r\n          </div>\r\n          <MicroservicesTable\r\n            selectAgent={selectAgent}\r\n            application={application}\r\n            selectMicroservice={selectMicroservice}\r\n            filter={msvcFilter}\r\n          />\r\n        </div>\r\n      </Paper>\r\n      <Paper className='section'>\r\n        <div className='section-container'>\r\n          <div className={[classes.section, 'paper-container-left', 'paper-container-right'].join(' ')}>\r\n            <Typography variant='subtitle2' className={classes.title}>\r\n              <span className={classes.stickyLeft}>Routes</span>\r\n            </Typography>\r\n          </div>\r\n          <Table stickyHeader>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>Name</TableCell>\r\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>From</TableCell>\r\n                <TableCell className={classes.tableTitle} classes={{ stickyHeader: classes.stickyHeaderCell }} style={{ top: '44px' }}>To</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {routes\r\n                .map((p, idx) => {\r\n                  if (!p.name) {\r\n                    return <TableRow key={idx}><TableCell colSpan={3} /></TableRow>\r\n                  }\r\n                  const from = application.microservices.find(m => m.name === p.from) || notFoundMsvc\r\n                  const to = application.microservices.find(m => m.name === p.to) || notFoundMsvc\r\n                  return (\r\n                    <TableRow key={p.name}>\r\n                      <TableCell component='th' scope='row'>\r\n                        {p.name}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start' }}>\r\n                          <Status status={from.status.status} size={10} style={{ marginRight: '5px', '--pulse-size': '5px' }} />\r\n                          <span className={from.notFound ? '' : classes.action} onClick={() => from.notFound ? null : selectMicroservice(from)}>{from.name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start' }}>\r\n                          <Status status={to.status.status} size={10} style={{ marginRight: '5px', '--pulse-size': '5px' }} />\r\n                          <span className={to.notFound ? '' : classes.action} onClick={() => to.notFound ? null : selectMicroservice(to)}>{to.name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </Paper>\r\n      <Paper className='section' style={{ maxHeight: '800px', paddingBottom: '15px' }}>\r\n        <div className={[classes.section, 'paper-container-left', 'paper-container-right'].join(' ')}>\r\n          <Typography variant='subtitle2' className={classes.title} style={{ zIndex: 5 }}>Application YAML</Typography>\r\n          <AceEditor\r\n            mode='yaml'\r\n            theme='monokai'\r\n            defaultValue={yamlDump}\r\n            readOnly\r\n            onLoad={function (editor) { editor.renderer.setPadding(10); editor.renderer.setScrollMargin(10) }}\r\n            style={{\r\n              width: '100%',\r\n              height: '700px',\r\n              borderRadius: '4px'\r\n            }}\r\n          />\r\n        </div>\r\n      </Paper>\r\n      <Dialog\r\n        open={openDeleteApplicationDialog}\r\n        onClose={() => { setOpenDeleteApplicationDialog(false) }}\r\n      >\r\n        <DialogTitle id='alert-dialog-title'>Delete {application.name}?</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            <span>Deleting an Application will delete all its microservices.</span><br />\r\n            <span>This is not reversible.</span>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteApplicationDialog(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => { deleteApplication(application) }} color='secondary' autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Modal\r\n        {...{\r\n          open: openDetailsModal,\r\n          title: `${application.name} details`,\r\n          onClose: () => setOpenDetailsModal(false),\r\n          size: 'lg'\r\n        }}\r\n      >\r\n        <ReactJson title='Application' src={application} name={false} />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\AgentDetails\\index.js",["199"],"import React from 'react'\r\n\r\nimport ReactJson from '../../Utils/ReactJson'\r\nimport { Paper, Typography, makeStyles, Icon, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button, useMediaQuery } from '@material-ui/core'\r\n\r\nimport { useData } from '../../providers/Data'\r\nimport { dateFormat, MiBFactor, fogTypes, icons, prettyBytes } from '../utils'\r\n\r\nimport getSharedStyle from '../sharedStyles'\r\n\r\nimport moment from 'moment'\r\nimport { useFeedback } from '../../Utils/FeedbackContext'\r\n\r\nimport MicroservicesTable from '../MicroservicesTable'\r\nimport Status from '../../Utils/Status'\r\nimport Modal from '../../Utils/Modal'\r\nimport EdgeResourceDetails from './EdgeResourceDetails'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  ...getSharedStyle(theme)\r\n}))\r\n\r\nexport default function AgentDetails ({ agent: selectedAgent, selectApplication, selectMicroservice, back }) {\r\n  const { data, deleteAgent: _deleteAgent, toggleApplication: _toggleApplication, deleteApplication: _deleteApplication } = useData()\r\n  const { pushFeedback } = useFeedback()\r\n  const [openDeleteAgentDialog, setOpenDeleteAgentDialog] = React.useState(false)\r\n  const [openDeleteApplicationDialog, setOpenDeleteApplicationDialog] = React.useState(false)\r\n  const [selectedApplication, setSelectedApplication] = React.useState({})\r\n  const [openDetailsModal, setOpenDetailsModal] = React.useState(false)\r\n  const [openERDetailsModal, setOpenERDetailsModal] = React.useState(false)\r\n  const [selectedER, setSelectedER] = React.useState({})\r\n  const classes = useStyles()\r\n  const isMediumScreen = useMediaQuery('(min-width: 768px)')\r\n\r\n  const { msvcsPerAgent, controller, applications } = data\r\n  const agent = (controller.agents || []).find(a => selectedAgent.uuid === a.uuid) || selectedAgent // Get live updates from data\r\n  const applicationsByName = React.useMemo(() => {\r\n    return (msvcsPerAgent[agent.uuid] || []).reduce((acc, m) => {\r\n      if (acc[m.application]) { acc[m.application].microservices.push(m) } else {\r\n        acc[m.application] = {\r\n          microservices: [m],\r\n          application: applications.find(a => a.name === m.application)\r\n        }\r\n      }\r\n      return acc\r\n    }, {})\r\n  }, [msvcsPerAgent, agent])\r\n\r\n  const deleteAgent = async () => {\r\n    try {\r\n      const response = await _deleteAgent(selectedAgent)\r\n      if (response.ok) {\r\n        pushFeedback({ type: 'success', message: 'Agent deleted!' })\r\n        back()\r\n      } else {\r\n        pushFeedback({ type: 'error', message: response.status })\r\n      }\r\n    } catch (e) {\r\n      pushFeedback({ type: 'error', message: e.message || e.status })\r\n    }\r\n  }\r\n\r\n  const toggleApplication = async (app) => {\r\n    try {\r\n      const response = await _toggleApplication(app)\r\n      if (response.ok) {\r\n        app.isActivated = !app.isActivated\r\n        pushFeedback({ type: 'success', message: `Application ${app.isActivated ? 'Started' : 'Stopped'}!` })\r\n      } else {\r\n        pushFeedback({ type: 'error', message: response.status })\r\n      }\r\n    } catch (e) {\r\n      pushFeedback({ type: 'error', message: e.message || e.status })\r\n    }\r\n  }\r\n\r\n  const restartApplication = async (app) => {\r\n    await toggleApplication(app)\r\n    await toggleApplication(app)\r\n  }\r\n\r\n  const deleteApplication = async (app) => {\r\n    try {\r\n      const response = await _deleteApplication(app)\r\n      if (response.ok) {\r\n        pushFeedback({ type: 'success', message: 'Application Deleted!' })\r\n        setOpenDeleteApplicationDialog(false)\r\n        setSelectedApplication({})\r\n      } else {\r\n        pushFeedback({ type: 'error', message: response.status })\r\n      }\r\n    } catch (e) {\r\n      pushFeedback({ type: 'error', message: e.message || e.status })\r\n    }\r\n  }\r\n\r\n  const _getSeeDetailsMessage = (application) => {\r\n    if (application.application.microservices.lenght === application.microservices.lenght) {\r\n      return 'See application details >'\r\n    }\r\n    if (application.application.microservices.lenght < 2) {\r\n      return 'See application details >'\r\n    }\r\n    return `See all ${application.application.microservices.lenght} Msvcs for this app >`\r\n  }\r\n\r\n  const mainActions = (\r\n    <div className={classes.actions} style={{ minWidth: 'unset' }}>\r\n      <icons.DeleteIcon onClick={() => setOpenDeleteAgentDialog(true)} className={classes.action} title='Delete application' />\r\n    </div>\r\n  )\r\n\r\n  const detailActions = (\r\n    <div className={classes.actions} style={{ minWidth: 0 }}>\r\n      <icons.CodeIcon onClick={() => setOpenDetailsModal(true)} className={classes.action} title='Details' />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Paper className={`section first ${classes.multiSections}`}>\r\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Status</span>\r\n            {!isMediumScreen && mainActions}\r\n          </Typography>\r\n          <span className={classes.text} style={{ display: 'flex', alignItems: 'center' }}><Status status={agent.daemonStatus} style={{ marginRight: '5px', marginTop: '-3px' }} />{agent.daemonStatus}</span>\r\n          {/* <span className={classes.subTitle} style={{ marginTop: '15px' }}>Last Active: <span className={classes.text}>{agent.lastStatusTime ? moment(agent.lastStatusTime).format(dateFormat) : '--'}</span></span> */}\r\n        </div>\r\n        <div className={classes.sectionDivider} />\r\n        <div className={[classes.section].join(' ')} style={{ paddingBottom: '15px' }}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Last Active</span>\r\n          </Typography>\r\n          <span className={classes.text}>{agent.lastStatusTime ? moment(agent.lastStatusTime).format(dateFormat) : '--'}</span>\r\n        </div>\r\n        <div className={classes.sectionDivider} />\r\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Description</span>\r\n            {isMediumScreen && mainActions}\r\n          </Typography>\r\n          <span className={classes.text}>{agent.description}</span>\r\n        </div>\r\n      </Paper>\r\n      <Paper className={`section ${classes.multiSections}`}>\r\n        <div className={[classes.section, 'paper-container-left', classes.bottomPad].join(' ')}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Agent Details</span>\r\n            {!isMediumScreen && detailActions}\r\n          </Typography>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Version</span>\r\n            <span className={classes.text}>{agent.version}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Type</span>\r\n            <span className={classes.text}>{fogTypes[agent.fogTypeId]}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Address</span>\r\n            <span className={classes.text}>{agent.host || agent.ipAddressExternal || agent.ipAddress}</span>\r\n          </div>\r\n          <div className={classes.subSection} style={{ paddingBottom: 0 }}>\r\n            <span className={classes.subTitle}>Created</span>\r\n            <span className={classes.text}>{moment(agent.createdAt).format(dateFormat)}</span>\r\n          </div>\r\n        </div>\r\n        <div className={classes.sectionDivider} />\r\n        <div className={classes.section}>\r\n          <Typography variant='subtitle2' className={classes.title}>Resource Utilization</Typography>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>CPU Usage</span>\r\n            <span className={classes.text}>{(agent.cpuUsage * 1).toFixed(2) + '%'}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Memory Usage</span>\r\n            <span className={classes.text}>{`${prettyBytes((agent.memoryUsage * MiBFactor))} / ${prettyBytes((agent.systemAvailableMemory))} (${((agent.memoryUsage * MiBFactor / agent.systemAvailableMemory * 100) || 0).toFixed(2)}%)`}</span>\r\n          </div>\r\n          <div className={classes.subSection}>\r\n            <span className={classes.subTitle}>Disk Usage</span>\r\n            <span className={classes.text}>{`${prettyBytes((agent.diskUsage * MiBFactor))} / ${prettyBytes((agent.systemAvailableDisk))} (${((agent.diskUsage * MiBFactor / agent.systemAvailableDisk * 100) || 0).toFixed(2)}%)`}</span>\r\n          </div>\r\n        </div>\r\n        <div className={classes.sectionDivider} />\r\n        <div className={[classes.section, 'paper-container-right'].join(' ')} style={{ paddingBottom: '15px' }}>\r\n          <Typography variant='subtitle2' className={classes.title}>\r\n            <span>Edge Resources</span>\r\n            {isMediumScreen && detailActions}\r\n          </Typography>\r\n          {agent.edgeResources.map(er => (\r\n            <div key={`${er.name}_${er.version}`} className={classes.edgeResource}>\r\n              <div className={classes.erIconContainer} style={{ '--color': 'white' }}>\r\n                {er.display && er.display.icon && <Icon title={er.display.name || er.name} className={classes.erIcon}>{er.display.icon}</Icon>}\r\n              </div>\r\n              <div className={`${classes.text} ${classes.action}`} onClick={() => { setSelectedER(er); setOpenERDetailsModal(true) }} style={{ marginLeft: '5px' }}>{(er.display && er.display.name) || er.name} {er.version}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Paper>\r\n      {Object.keys(applicationsByName).map(applicationName => (\r\n        <Paper key={applicationName} className='section' style={{ paddingBottom: 0 }}>\r\n          <div className='section-container'>\r\n            <div className={[classes.section, classes.cardTitle, 'paper-container-left', 'paper-container-right'].join(' ')}>\r\n              <Typography variant='subtitle2' className={classes.title}>\r\n                <span className={[classes.stickyLeft, classes.textEllipsis].join(' ')} title={applicationName}>{applicationName}</span>\r\n                <div className={[classes.actions, 'sticky-right'].join(' ')} style={{ minWidth: '100px' }}>\r\n                  <icons.DeleteIcon className={classes.action} title='Delete application' onClick={() => { setSelectedApplication(applicationsByName[applicationName].application); setOpenDeleteApplicationDialog(true) }} />\r\n                  {applicationsByName[applicationName].application.isActivated\r\n                    ? <icons.RestartIcon className={classes.action} onClick={() => restartApplication(applicationsByName[applicationName].application)} title='Restart application' />\r\n                    : <icons.RestartIcon className={classes.disabledAction} title='Restart application' />}\r\n                  {applicationsByName[applicationName].application.isActivated\r\n                    ? <icons.StopIcon className={classes.action} onClick={() => toggleApplication(applicationsByName[applicationName].application)} title='Stop application' />\r\n                    : <icons.PlayIcon className={classes.action} onClick={() => toggleApplication(applicationsByName[applicationName].application)} title='Start application' />}\r\n                </div>\r\n              </Typography>\r\n            </div>\r\n            <MicroservicesTable\r\n              nameTitle='Msvc Name'\r\n              application={applicationsByName[applicationName]}\r\n              selectMicroservice={selectMicroservice}\r\n              showVolumes\r\n            />\r\n            <div\r\n              style={{\r\n                textAlign: 'right',\r\n                fontSize: '16px',\r\n                fontWeight: '300',\r\n                paddingTop: '30px',\r\n                paddingBottom: '15px',\r\n                fontStyle: 'italic',\r\n                position: 'sticky',\r\n                bottom: '0',\r\n                right: '15px',\r\n                float: 'right',\r\n                zIndex: 6,\r\n                backgroundColor: 'white'\r\n              }}\r\n            >\r\n              <span className={classes.action} onClick={() => selectApplication(applicationsByName[applicationName].application)}>{_getSeeDetailsMessage(applicationsByName[applicationName])}</span>\r\n            </div>\r\n          </div>\r\n        </Paper>\r\n      ))}\r\n      <Dialog\r\n        open={openDeleteAgentDialog}\r\n        onClose={() => { setOpenDeleteAgentDialog(false) }}\r\n      >\r\n        <DialogTitle id='alert-dialog-title'>Delete {agent.name}?</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            <span>Deleting an agent will delete all its microservices.</span><br />\r\n            <span>This is not reversible.</span>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteAgentDialog(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => deleteAgent()} color='secondary' autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Dialog\r\n        open={openDeleteApplicationDialog}\r\n        onClose={() => { setOpenDeleteApplicationDialog(false) }}\r\n      >\r\n        <DialogTitle id='alert-dialog-title'>Delete {selectedApplication.name}?</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-description'>\r\n            <span>Deleting an Application will delete all its microservices.</span><br />\r\n            <span>This is not reversible.</span>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDeleteApplicationDialog(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => deleteApplication(selectApplication)} color='secondary' autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Modal\r\n        {...{\r\n          open: openERDetailsModal,\r\n          title: `${selectedER.name} details`,\r\n          onClose: () => setOpenERDetailsModal(false),\r\n          size: 'lg'\r\n        }}\r\n      >\r\n        <EdgeResourceDetails edgeResource={selectedER} />\r\n      </Modal>\r\n      <Modal\r\n        {...{\r\n          open: openDetailsModal,\r\n          title: `${agent.name} details`,\r\n          onClose: () => setOpenDetailsModal(false),\r\n          size: 'lg'\r\n        }}\r\n      >\r\n        <ReactJson title='Agent' src={agent} name={false} />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\utils.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\SearchBar.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\ApplicationParser.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\FileDrop.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\constants.js",["200"],"export const API_VERSIONS = ['datasance.com/v1', 'datasance.com/v1']\r\nexport default {\r\n  API_VERSIONS\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Tabs.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Status.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\ActiveResources.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\AgentDetails\\EdgeResourceDetails.js",["201"],"import React from 'react'\r\nimport ReactJson from '../../Utils/ReactJson'\r\nimport { useController } from '../../ControllerProvider'\r\nimport { useFeedback } from '../../Utils/FeedbackContext'\r\n\r\nexport default function EdgeResourceDetails ({ edgeResource: _edgeResource }) {\r\n  const { request } = useController()\r\n  const { pushFeedback } = useFeedback()\r\n  const [edgeResource, setEdgeResource] = React.useState(_edgeResource)\r\n  React.useEffect(() => {\r\n    async function fetchData () {\r\n      try {\r\n        const res = await request(`/api/v1/edgeResource/${edgeResource.name}/${edgeResource.version}`)\r\n        if (res.ok) {\r\n          setEdgeResource(await res.json())\r\n        } else {\r\n          try {\r\n            const message = (await res.json()).message\r\n            pushFeedback({ message, type: 'error' })\r\n          } catch (e) {\r\n            pushFeedback({ message: res.statusText, type: 'error' })\r\n          }\r\n        }\r\n      } catch (e) {\r\n        pushFeedback({ message: e.message, type: 'error' })\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n  return <ReactJson title='Edge Resource' src={edgeResource} name={false} />\r\n}\r\n","C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\ReactJson.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\sharedStyles\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\ApplicationList\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\Default\\AgentList\\index.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\ECNViewer\\MicroservicesTable\\index.js",[],["202","203"],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\CatalogTable.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Catalog\\Application\\DeployApplicationTemplate.js",[],"C:\\DatasanceProjects\\ECN-Viwer\\src\\Utils\\Confirm.js",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":13,"column":12,"nodeType":"210","messageId":"211","endLine":13,"endColumn":17},{"ruleId":"212","severity":1,"message":"213","line":91,"column":6,"nodeType":"214","endLine":91,"endColumn":16,"suggestions":"215"},{"ruleId":"212","severity":1,"message":"216","line":165,"column":6,"nodeType":"214","endLine":165,"endColumn":31,"suggestions":"217"},{"ruleId":"212","severity":1,"message":"218","line":80,"column":6,"nodeType":"214","endLine":80,"endColumn":8,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":13,"column":1,"nodeType":"222","endLine":16,"endColumn":2},{"ruleId":"220","severity":1,"message":"221","line":26,"column":1,"nodeType":"222","endLine":30,"endColumn":2},{"ruleId":"212","severity":1,"message":"223","line":37,"column":6,"nodeType":"214","endLine":37,"endColumn":13,"suggestions":"224"},{"ruleId":"212","severity":1,"message":"225","line":81,"column":6,"nodeType":"214","endLine":81,"endColumn":17,"suggestions":"226"},{"ruleId":"212","severity":1,"message":"227","line":102,"column":6,"nodeType":"214","endLine":102,"endColumn":15,"suggestions":"228"},{"ruleId":"212","severity":1,"message":"229","line":122,"column":6,"nodeType":"214","endLine":122,"endColumn":8,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":91,"column":13,"nodeType":"233","messageId":"234","endLine":98,"endColumn":14},{"ruleId":"212","severity":1,"message":"235","line":138,"column":93,"nodeType":"214","endLine":138,"endColumn":106,"suggestions":"236"},{"ruleId":"212","severity":1,"message":"237","line":47,"column":6,"nodeType":"214","endLine":47,"endColumn":28,"suggestions":"238"},{"ruleId":"220","severity":1,"message":"221","line":2,"column":1,"nodeType":"222","endLine":4,"endColumn":2},{"ruleId":"212","severity":1,"message":"239","line":29,"column":6,"nodeType":"214","endLine":29,"endColumn":8,"suggestions":"240"},{"ruleId":"204","replacedBy":"241"},{"ruleId":"206","replacedBy":"242"},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-redeclare","'fetch' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.","ArrayExpression",["245"],"React Hook React.useMemo has a missing dependency: 'authenticate'. Either include it or remove the dependency array. Mutable values like 'tokenRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["246"],"React Hook React.useEffect has a missing dependency: '_fetchConfig'. Either include it or remove the dependency array.",["247"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook React.useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array.",["248"],"React Hook React.useEffect has a missing dependency: 'returnHomeCBRef'. Either include it or remove the dependency array.",["249"],"React Hook React.useEffect has missing dependencies: 'data.activeAgents', 'location', and 'setMap'. Either include them or remove the dependency array.",["250"],"React Hook React.useEffect has a missing dependency: 'fetchCatalog'. Either include it or remove the dependency array.",["251"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook React.useMemo has a missing dependency: '_getApplicationYAMLFromJSON'. Either include it or remove the dependency array.",["252"],"React Hook React.useMemo has a missing dependency: 'applications'. Either include it or remove the dependency array.",["253"],"React Hook React.useEffect has missing dependencies: 'edgeResource.name', 'edgeResource.version', 'pushFeedback', and 'request'. Either include them or remove the dependency array.",["254"],["243"],["244"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},"Update the dependencies array to be: [location, refreshData]",{"range":"275","text":"276"},"Update the dependencies array to be: [error, authenticate]",{"range":"277","text":"278"},"Update the dependencies array to be: [_fetchConfig]",{"range":"279","text":"280"},"Update the dependencies array to be: [callback, delay]",{"range":"281","text":"282"},"Update the dependencies array to be: [returnHomeCBRef, seeAllECN]",{"range":"283","text":"284"},"Update the dependencies array to be: [data.activeAgents, loading, location, setMap]",{"range":"285","text":"286"},"Update the dependencies array to be: [fetchCatalog]",{"range":"287","text":"288"},"Update the dependencies array to be: [_getApplicationYAMLFromJSON, application]",{"range":"289","text":"290"},"Update the dependencies array to be: [msvcsPerAgent, agent.uuid, applications]",{"range":"291","text":"292"},"Update the dependencies array to be: [edgeResource.name, edgeResource.version, pushFeedback, request]",{"range":"293","text":"294"},[2322,2332],"[location, refreshData]",[5045,5070],"[error, authenticate]",[2041,2043],"[_fetchConfig]",[838,845],"[callback, delay]",[2500,2511],"[returnHomeCBRef, seeAllECN]",[2985,2994],"[data.activeAgents, loading, location, setMap]",[3928,3930],"[fetchCatalog]",[4805,4818],"[_getApplicationYAMLFromJSON, application]",[2214,2236],"[msvcsPerAgent, agent.uuid, applications]",[1059,1061],"[edgeResource.name, edgeResource.version, pushFeedback, request]"]